
const data = {
        knownPalindromes : [
        "Anna", "civic", "kayak", 
        "level", "madam", "mom", "noon", 
        "racecar", "radar", "redder", 
        "refer", "repaper", "rotator", 
        "rotor", "sagas", "solos", 
        "stats", "tenet", "wow"],

        notPalindromes : [
        "Bike", "Dave", "yes", 
        "potato", "Banana", "45 Thousand", "News Paper", 
        "Daily Mail", "The New Scientist", "Metro", 
        "Did_you_know", "I_Live", "Near", 
        "The", "Metro", "Offices", 
        "IN_HAMMERSMITH", "because", "I_live_on_shepherds_bush_road", ":)"],

        people: [
            {
                name: "Bob",
                age: 29
            },
            {
                name: "Alice",
                age: 42,
            },
            {
                name: "Greg",
                age: 23
            },
            {
                name: "Jean",
                age: 50
            }
        ],
};

const functions = {
    //Task 1 and 6
    // This takes in words from the Data object above, and then loops through the words, returning one random word. 
    readWords: (dataLists)=>{        
        let randomWord = ''; 
        for (let i = 0; i < dataLists.length; i++){
            const index = Math.floor(Math.random() * i);
            randomWord = dataLists[index];
         
        };
        return randomWord;
    },

       //Task 1 and 6
    // This takes in one Random word generated by readWords, and assesses if it is a palindrome.
    palindrome: (readWords)=>{
        const wordRegEx = '/[\W_]/g ';
        const formatNoSpaces = readWords.toLowerCase().replace(wordRegEx, ' ');
        const reverseWords = formatNoSpaces.split('').reverse().join('');
        if (formatNoSpaces === reverseWords){
            return true;
        } else {return false;};
    },

    //Task 4 and 6 
    // - 4.1	Order the people by age in decending order
    // - 4.2	Order the people by name alphabetically A-Z
    // - 4.3	Pull just the ages into a new array
    sortPeople: (sort)=>{   
        //new instance of original data, removing concerns from original data
       const results = [...data.people];
       
       const ageByDescending = ()=>{ return results.sort((age1, age2) =>{ 
           return age2.age - age1.age });};
      
       const firstnameByAlphabeticalOrderA_Z = () =>{ return results.sort((a,b)=>{ 
           return a.name.toLowerCase().substring(0)
           .localeCompare(b.name.toLowerCase().substring(0))});};
       
       const extractAges = () =>{
            ageByDescending();   
            return results.map(extract => extract.age)
        };


       switch(sort){
            case 
                'ageByDescending': return ageByDescending()
                    break;
            case 
                'byfirstNameOrder': return firstnameByAlphabeticalOrderA_Z()
                    break; 
            case 
                'extractAges': return extractAges()
                    break;
                default: return;
       }

    }

};

module.exports = {
    palindrome: functions.palindrome, 
    readWords: functions.readWords,
    knownPalindromes: data.knownPalindromes, 
    notPalindromes: data.notPalindromes, 
    sortPeople:functions.sortPeople,
    people: data.people
};